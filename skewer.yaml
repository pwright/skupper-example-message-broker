title: Accessing a message broker using Skupper
subtitle: |-
  Use public cloud resources to process data from a private message broker
overview: |-
  This example is a multi-service messaging application that can
  be deployed across multiple Kubernetes clusters using Skupper.

  It contains three services:

  * A message broker running in a private data center.  The broker has
    three queues: "requests", "responses", and "worker-status".

  * A frontend service running in the private data center.  It serves
    a REST API for sending requests and getting responses.

  * A worker service running in the public cloud.  It receives from
    the request queue, does some work, and sends the result to the
    response queue.  It also sends periodic status updates.
prerequisites: !string prerequisites
contexts:
  cloud_provider:
    kubeconfig: ~/.kube/config-cloud-provider
    namespace: cloud-provider
  data_center:
    kubeconfig: ~/.kube/config-data-center
    namespace: data-center
steps:
  - title: Configure separate console sessions
    preamble: !string configure_separate_console_sessions_preamble
    commands:
      cloud_provider:
        - run: export KUBECONFIG=~/.kube/config-cloud-provider
      data_center:
        - run: export KUBECONFIG=~/.kube/config-data-center
  - title: Log in to your clusters
    preamble: !string log_in_to_your_clusters_preamble
  - title: Set the current namespaces
    preamble: !string set_the_current_namespaces_preamble
    commands:
      cloud_provider:
        - run: kubectl create namespace cloud-provider
        - run: kubectl config set-context --current --namespace cloud-provider
      data_center:
        - run: kubectl create namespace data-center
        - run: kubectl config set-context --current --namespace data-center
  - title: Install Skupper in your namespaces
    preamble: !string install_skupper_in_your_namespaces_preamble
    commands:
      cloud_provider:
        - run: skupper init
          await: [deployment/skupper-service-controller, deployment/skupper-router]
      data_center:
        - run: skupper init --ingress none
          await: [deployment/skupper-service-controller, deployment/skupper-router]
  - title: Link your namespaces
    preamble: !string link_your_namespaces_preamble
    commands:
      cloud_provider:
        - run: skupper token create ~/cloud-provider.token
      data_center:
        - run: skupper link create ~/cloud-provider.token
        - run: skupper link status --wait 30
  # - title: Deploy your services
  #   commands:
  #     cloud_provider:
  #       - run: kubectl create deployment worker --image quay.io/skupper/job-queue-worker
  #         await: [deployment/worker]
  #     data_center:
  #       - run: kubectl apply -f message-broker.yaml
  #         await: [deployment/message-broker]
  #       - run: kubectl create deployment frontend --image quay.io/skupper/job-queue-frontend
  #         await: [deployment/frontend]
  # - title: Expose your services
  #   commands:
  #     data_center:
  #       - run: skupper expose deployment/message-broker --port 5672
  #         await: [service/message-broker]
  #       - run: kubectl expose deployment/frontend --port 8080 --type LoadBalancer
  #         await: [service/frontend]
  - title: Deploy and expose the message broker
    commands:
      data_center:
        - run: kubectl apply -f message-broker.yaml
          await: [deployment/message-broker]
        - run: skupper expose deployment/message-broker --port 5672
          await: [service/message-broker]
  - title: Deploy the frontend and worker services
    commands:
      cloud_provider:
        - run: kubectl create deployment worker --image quay.io/skupper/job-queue-worker
          await: [deployment/worker]
      data_center:
        - run: kubectl create deployment frontend --image quay.io/skupper/job-queue-frontend
          await: [deployment/frontend]
        - run: kubectl expose deployment/frontend --port 8080 --type LoadBalancer
          await_external_ip: [service/frontend]
  - title: Test the application
    commands:
      data_center:
        - run: "curl -i $(kubectl get service/frontend -o jsonpath='http://{.status.loadBalancer.ingress[0].ip}:8080/api/send-request') -d text=hello"
          sleep: 0.5
        - run: "curl -i $(kubectl get service/frontend -o jsonpath='http://{.status.loadBalancer.ingress[0].ip}:8080/api/responses')"
        - run: "curl -i $(kubectl get service/frontend -o jsonpath='http://{.status.loadBalancer.ingress[0].ip}:8080/api/worker-status')"
