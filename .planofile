from skewer import *

@command
def generate(app):
    import yaml

    with open("skewer.yaml") as skewer_file:
        skewer_data = yaml.safe_load(skewer_file)
        generate_readme(skewer_data)

    print(read("README.md"))

@command
def test(app):
    import yaml

    with open("skewer.yaml") as skewer_file:
        work_dir = make_temp_dir()
        minikube_profile = "skupper-example-message-broker"
        skewer_data = yaml.safe_load(skewer_file)

        with open("/tmp/minikube-tunnel-output", "w") as tunnel_output_file:
            try:
                run(f"minikube start -p {minikube_profile}")
                run(f"minikube profile {minikube_profile}")

                with start("minikube tunnel", output=tunnel_output_file):
                    contexts = setup_contexts(work_dir, skewer_data)
                    run_steps(work_dir, skewer_data, contexts)
            finally:
                run(f"minikube delete -p {minikube_profile}")

def setup_contexts(work_dir, skewer_data):
    contexts = skewer_data["contexts"]

    for name, value in contexts.items():
        kubeconfig = value["kubeconfig"].replace("~", work_dir)

        with working_env(KUBECONFIG=kubeconfig):
            run(f"minikube update-context")
            check_file(ENV["KUBECONFIG"])

    return contexts

def run_steps(work_dir, skewer_data, contexts):
    for step_data in skewer_data["steps"]:
        if "commands" not in step_data:
            continue

        for context_name, commands in step_data["commands"].items():
            kubeconfig = contexts[context_name]["kubeconfig"].replace("~", work_dir)

            with working_env(KUBECONFIG=kubeconfig):
                for command in commands:
                    run(command["run"].replace("~", work_dir), shell=True)

                    if "await" in command:
                        for resource in command["await"]:
                            group, name = resource.split("/", 1)
                            await_resource(group, name)

                    if "sleep" in command:
                        sleep(command["sleep"])

def generate_readme(skewer_data):
    out = list()

    out.append(f"# {skewer_data['title']}")
    out.append("")
    out.append(skewer_data["subtitle"])

    # TOC

    out.append("")
    out.append("## Overview")
    out.append("")
    out.append(skewer_data["overview"])

    out.append("")
    out.append("## Prerequisites")
    out.append("")
    out.append(skewer_data["prerequisites"])

    for i, step_data in enumerate(skewer_data["steps"], 1):
        out.append("")
        out.append(f"## Step {i}: {step_data['title']}")

        if "preamble" in step_data:
            out.append("")
            out.append(step_data["preamble"])

        if "commands" in step_data:
            for context_name, commands in step_data["commands"].items():
                out.append("")
                out.append(f"Console session `{context_name}`:")
                out.append("")
                out.append("```shell")

                for command in commands:
                    out.append(command["run"])

                out.append("```")

        if "postamble" in step_data:
            out.append("")
            out.append(skewer_data["postamble"])

    write("README.md", "\n".join(out))
