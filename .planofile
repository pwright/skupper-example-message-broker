from skewer import *

@command
def generate(app):
    generate_readme("skewer.yaml", "README.md")

@command
def render(app):
    generate(app)
    run(f"pandoc -o README.html README.md")

@command
def test(app):
    with temp_file() as temp:
        generate_readme("skewer.yaml", temp)

    run_steps_on_minikube("skewer.yaml")

@command
def test_external(app, cloud_provider, data_center):
    run_steps_external("skewer.yaml", cloud_provider=cloud_provider, data_center=data_center)

@command
def build_images(app):
    run("podman build -t quay.io/skupper/job-queue-worker worker")
    run("podman build -t quay.io/skupper/job-queue-frontend frontend")

@command
def push_images(app):
    run("podman push quay.io/skupper/job-queue-worker")
    run("podman push quay.io/skupper/job-queue-frontend")

@command
def run_broker(app):
    run("podman run -it -p 45672:5672 -e AMQ_USER=admin -e AMQ_PASSWORD=admin quay.io/artemiscloud/activemq-artemis-broker")

connect_data = {
    "scheme": "amqp",
    "host": "localhost",
    "port": 45672,
}

@command
def run_worker(app):
    with temp_file() as connect_file:
        write_json(connect_file, connect_data)

        with working_env(MESSAGING_CONNECT_FILE=connect_file):
            run("python3 worker/main.py")

@command
def run_frontend(app):
    with temp_file() as connect_file:
        write_json(connect_file, connect_data)

        with working_env(MESSAGING_CONNECT_FILE=connect_file):
            run("python3 frontend/main.py")

# curl -i http://0.0.0.0:8080/api/send-request -d text=abc
# curl -i http://0.0.0.0:8080/api/responses
# curl -i http://0.0.0.0:8080/api/worker-status
